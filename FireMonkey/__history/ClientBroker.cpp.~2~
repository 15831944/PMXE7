// ---------------------------------------------------------------------------

#include <fmx.h>
#pragma hdrstop
// ---------------------------------------------------------------------------
#include "ClientBroker.h"
//#include "ZClientDataSet.h"
//#include "ZClientQuery.h"
#include "MsgStream.h"
#include "SHConst.h"
#include "DSClientProxy.h"
#include "fsScreenCursor.h"
#define _TimeOuts 10       //秒
// ---------------------------------------------------------------------------
#pragma package(smart_init)
const int TRIAL_MAX_UPDATE = 60;

// ---------------------------------------------------------------------------
__fastcall TClientBroker::TClientBroker() {
	FClientID = 0;
	FRemoter = false;
	FPassword = "1";
	FAccBookID = "1001";
	FUserCode = "";
	FLogonCode = "1001";
	FAccBookName = "";
	FUserEmpID = "";
	FQQID = "0";
	FAgentAddress="localhost";
	FAgentPort=211;
	FIsSystemer = 0;
	FRecvAccBook = false;
	FSysDbType = 1;
	FAccDbType = 1;
	BrokerErrorMessage = "";
	/////////////////////////////

	FClientLibs = new TCZDataSet;
	FClientLibs->AddField("libcode"); // 动态链接库代码
	FClientLibs->AddField("hinst"); // 动态链接库句柄
	FClientLibs->AddField("count"); // 动态链接装载次数
	FClientLibs->AddField("libname"); //动态链接库文件名称

	FClientForms = new TCZDataSet;
	FClientForms->AddField("modulecode");
	FClientForms->AddField("modulecaption");
	FClientForms->AddField("formcode"); // 窗体编码
	FClientForms->AddField("formid"); // 窗体地址,通过窗体地址可获取窗体Handle
	FClientForms->AddField("libhinst");

	FAccBooks = new TCZDataSet;
	FAccBooks->AddField("accbookcode");
	FAccBooks->AddField("accbookname");
	FAccBooks->KeyField = "accbookcode";

	FModuleRight = new TClientDataSet(NULL); // 用于保存模块权限数据
	FUserDataSet = new TCZDataSet; // 保存系统用户数据集
	FUserDataSet->AddField("LoginCode");
	FUserDataSet->AddField("UserName");
	FUserDataSet->AddField("UserCode");
	FUserDataSet->AddField("UserID");
	FUserDataSet->KeyField = "LoginCode";


	ClientBrokerStatus = 0; // -1-系统错误,0-尚未注册,1-尚未登录,2-系统准备好
	FServerID = "";
	FRecvAccBook = false;
	FIsTrial = true;
	FUpdateTimes = 0;
	FAppConnected = false;
	//怎么获取路径
	/*ClientPath = ExtractFilePath(Application->ExeName);
	if (ClientPath.LastChar() != "\\")
		ClientPath = ClientPath + "\\";   */

	LoginUserClient = NULL;
	DSConnection=new TSQLConnection(NULL);
	LChannelManager=NULL;
	MsgCallBack=NULL;

}

// ---------------------------------------------------------------------------
TDBXConnection* __fastcall TClientBroker::GetDBXConnection()
{
  return  DSConnection->DBXConnection;
}
__fastcall TClientBroker::~TClientBroker() {
	ClientCommTerminate(NULL);
}

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::ClientCommTerminate(TObject *Sender) {
	ClientBrokerStatus = 0;

	CloseAllForms(); //关闭所有窗体
	if(LoginUserClient)
		delete LoginUserClient;
	if(DSConnection)
	{
	  DSConnection->Close();
	  delete DSConnection;
	}

	FClientForms->Clear();
	delete FClientForms;
	FClientForms = NULL;

	delete FModuleRight;
	delete FAccBooks;
	delete FUserDataSet;
	FClientLibs->First();
	while (!FClientLibs->Eof){
	   unsigned hInst=(unsigned )(FClientLibs->FieldValues["hinst"].ToInt());
	   String libFileName=FClientLibs->FieldValues["libname"];
	   if(ExtractFileExt(libFileName).UpperCase()==".BPL")
	  	UnloadPackage(hInst);
	   FClientLibs->Next();
	}
	delete FClientLibs;
}

// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
bool __fastcall TClientBroker::InitClientComm() {


  String NL = "\r\n";
  String ConnectionStr = "DriverName=Datasnap"+NL+
						 "DriverUnit=Data.DBXDataSnap"+NL+
						 "HostName="+FAgentAddress+NL+
						 "Port="+IntToStr(FAgentPort)+NL+
						 "CommunicationProtocol=tcp/ip"+NL+
						 "DatasnapContext=datasnap/"+NL+
						 "DriverAssemblyLoader=Borland.Data.TDBXClientDriverLoader,Borland.Data.DbxClientDriver,Version=16.0.0.0,Culture=neutral,PublicKeyToken=91d62ebb5b0d1b1b"+NL+
						 "DSAuthenticationUser=FSAdmin"+NL+
						 "DSAuthenticationPassword=fs123!@#"+NL;
 DSConnection->DriverName="Datasnap";
 DSConnection->Params->Text = ConnectionStr;
 DSConnection->LoginPrompt=false;
 DSConnection->KeepConnection=true;
 DSConnection->AfterConnect=AppOnConnect;
 DSConnection->AfterDisconnect=AppOnDisConnect;
 DSConnection->Open();
 return DSConnection->Connected;

}

// ---------------------------------------------------------------------------
bool __fastcall TClientBroker::LogIn() {
	String errMsg;
	if(FLogonCode.IsEmpty()||FAccBookID.IsEmpty())
	 throw Exception("登录信息没有赋值！");
	TfsScreenCursor * ScreenCursor=new TfsScreenCursor();
	FAppConnected=LoginUserClient->IsValidUser(FLogonCode,FPassword,FAccBookID,errMsg);
	if (FAppConnected)
	{
		//RefreshGlobeVar();  等数据转换后再放开
		//GetModuleRight();
   //		SendMessage(Application->MainForm->Handle, WM_LOGIN_STATUS, 1, 0); // 成功
		if(LChannelManager==NULL)
		{
			LChannelManager=new TDSClientCallbackChannelManager(NULL);
			LChannelManager->ChannelName=SMessageChannel+FAccBookID;
			LChannelManager->DSHostname = DSConnection->Params->Values["HostName"];
			LChannelManager->DSPort = DSConnection->Params->Values["Port"];
			// LChannelManager->DSPath = DSConnection->Params->Values["URLPath"];
			LChannelManager->CommunicationProtocol = DSConnection->Params->Values["CommunicationProtocol"];
			//LChannelManager->OnServerConnectionTerminate = OnServerConnectionTerminate;
			//LChannelManager->OnServerConnectionError = OnServerConnectionError;
			//LChannelManager->OnChannelStateChange = OnChannelStateChange;
			LChannelManager->UserName = DSConnection->Params->Values["DSAuthenticationUser"];
			LChannelManager->Password = DSConnection->Params->Values["DSAuthenticationPassword"];
			MsgCallBack=new TCallbackClient(LChannelManager,SMsgCallback);
//			MsgCallBack->HookCallBack=FHookCallBack;//&MessageCallBackHook;
			LoginUserClient->UpdateCurUserCallbackClientID(LChannelManager->ManagerId);
		}
	}
	else
	{
		LogOut();
		ShowMessage(errMsg);
	}
	delete ScreenCursor;
	return FAppConnected;


}

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::LogOut() {


	try {
		ClientBrokerStatus = 0;
		CloseAllForms();
		if(LChannelManager)
		{
		 // if(MsgCallBack)
		 //	delete MsgCallBack;

		  delete  LChannelManager;
		  LChannelManager=NULL;
		}
		DSConnection->Close();

	  //	PostMessage(Application->MainForm->Handle, WM_LOGIN_STATUS, 0, 0);
		}
	catch (Exception &e) {
	}
}

// ---------------------------------------------------------------------------
bool __fastcall TClientBroker::ChangePwd(String szNewPwd) {
 String errMsg,newEncPwd,oldEncPwd;
 bool bresult=false;
 newEncPwd=szNewPwd;
 oldEncPwd=FPassword;
 bresult=LoginUserClient->ChangePassword(FUserCode,oldEncPwd,newEncPwd,errMsg);
 return bresult;
}

// ---------------------------------------------------------------------------
bool __fastcall TClientBroker::GetLogInfo(TLogInfo *logInfo) {
	try {
		logInfo->IsSystemer = IsSystemer;
		logInfo->AgentPort = AgentPort;
		StrCopy(logInfo->UserCode, UserCode.c_str());
		StrCopy(logInfo->LogonCode, LogonCode.c_str());
		StrCopy(logInfo->UserEmpID, FUserEmpID.c_str());
		StrCopy(logInfo->AccBookID, AccBookID.c_str());
		StrCopy(logInfo->UserName, UserName.c_str());
		StrCopy(logInfo->AccBookName, AccBookName.c_str());
		StrCopy(logInfo->Version, Version.c_str());
		StrCopy(logInfo->AgentAddress, AgentAddress.c_str());
		StrCopy(logInfo->SoftName, SoftName.c_str());
		StrCopy(logInfo->Email, Email.c_str());
		StrCopy(logInfo->HomePage, HomePage.c_str());

		logInfo->IsRemoter = FRemoter; // 20090830需要修改
		// ftp
		logInfo->ftpPort = FftpPort;
		logInfo->ftpNeedFTP = FftpNeedFTP;
		logInfo->ftpPassive = FftpPassive;
		if (FRemoter)
			StrCopy(logInfo->ftpIP, FftpInternetIP.c_str()); // 外部
		else
			StrCopy(logInfo->ftpIP, ftpInteranetIP.c_str()); // 内部
		StrCopy(logInfo->ftpUserName, FftpUserName.c_str());
		StrCopy(logInfo->ftpPassword, FftpPassword.c_str());
		// QQ
		StrCopy(logInfo->QQID, FQQID.c_str());
		StrCopy(logInfo->QQPassword, FQQPassword.c_str());
		// mail
		StrCopy(logInfo->mailServer, FMailServer.c_str());
		StrCopy(logInfo->mailUserName, FMailUserName.c_str());
		StrCopy(logInfo->mailPassword, FMailPassword.c_str());
		StrCopy(logInfo->sendEMail, FSendEMail.c_str());
		StrCopy(logInfo->UpdateURL, FUpdateURL.c_str());
		logInfo->mailPort = FMailPort;
	}
	catch (...) {
		return false;
	}
	return true;
}
// ---------------------------------------------------------------------------

void __fastcall TClientBroker::GetModuleData(TClientDataSet *query) {

 /*  TfsScreenCursor * ScreenCursor=new TfsScreenCursor();
   TADODataSetStream *ADOStream=new TADODataSetStream();
   TStream *ms=NULL;
   try{
	ms =LoginUserClient->GetModuleData();
	ms->Position=0;
	ADOStream->LoadFromStream(ms);
	ADOStream->SaveToDataSet(query);
   }
   __finally
   {
	   delete ScreenCursor;
	   delete ADOStream;
	 //  if(ms) delete ms;
   } */
}

// ---------------------------------------------------------------------------
TStream* __fastcall TClientBroker::GetClassList() {

   return	LoginUserClient->GetClassList();
}

// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
TStream* __fastcall TClientBroker::GetAutoCodeFields() {

	 return	LoginUserClient->GetAutoCodeFields();
}

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::GetAccList() {

	TJSONObject *ms=LoginUserClient->GetAccListJSON();
	GetAccInforJSONBack((TJSONObject *)ms->Clone());
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::GetModuleRight()
{
/*	TStream *ms;
	TADODataSetStream *ADOStream=new TADODataSetStream();
	try{
		ms=LoginUserClient->GetModuleRight();
		ms->Position=0;
		ADOStream->LoadFromStream(ms);
		ADOStream->SaveToDataSet(FModuleRight);
	}
	__finally
	{
		delete ADOStream;
	}  */

}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::GetCurUserInfo()
{
 /*	TStream *ms;
	TADODataSet *curUserInfo=new TADODataSet(NULL);
	TADODataSetStream *ADOStream=new TADODataSetStream();
	try{
		ms=LoginUserClient->GetCurUserInfo();
		ADOStream->LoadFromStream(ms);
		ADOStream->SaveToDataSet(curUserInfo);
		if(curUserInfo->RecordCount>0)
		{
			curUserInfo->First();
			FQQID=curUserInfo->FieldByName("UserLanguage")->AsString;
			FQQPassword=curUserInfo->FieldByName("UserPassword")->AsString;
			FUserCode=curUserInfo->FieldByName("UserIDCode")->AsString;
			FUserEmpID = curUserInfo->FieldByName("EmpPKID")->AsString;
		}

	}
	__finally
	{
		delete ADOStream;
		delete curUserInfo;
	} */
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::MessageCallBackHook(TJSONObject* Arg) // 接收消息
{
	//转化有问题
	String msgText=Arg->ToString();
	ShowMessage(msgText);

}

void __fastcall TClientBroker::SendUserMessage(int type, String Msg)
	// 发送系统到服务器消息 type:11-审批消息，12-短消息，13-备忘录
{
/*	TMsgStream *MsgStream = new TMsgStream();
	try {
		MsgStream->Operate = asUserSendMessage;
		MsgStream->ValueAttribute["usercode"] = FUserCode;
		MsgStream->ValueAttribute["type"] = String(type);
		MsgStream->ValueAttribute["msg"] = Msg;
		if (FRemoter) {
			FAgentData->Clear();
			MsgStream->SaveToDataBlock(FAgentData);
			FAgentData->Signature = CallSig | asUserSendMessage;
			if (FAgentSocket && FAgentSocket->Connected)
				FAgentSendDataBlock->Send(FAgentData, false);
			FAgentData->Clear();
		}
		else {
			FAppData->Clear();
			MsgStream->SaveToDataBlock(FAppData);
			FAppData->Signature = CallSig | asUserSendMessage;
			if (FAgentSocket && FAgentSocket->Connected)
				FAppSendDataBlock->Send(FAppData, false);
			FAppData->Clear();
		}

	}
	__finally {
		delete MsgStream;
	} */
}

// 接收账套数据
void __fastcall TClientBroker::GetAccInforJSONBack(TJSONObject *fdata) {
	String s;
	try {
		if (fdata->Get("status")->JsonValue->Value() == "f") {
			s = fdata->Get("errormessage")->JsonValue->Value();
			ShowMessage( s);
			Application->Terminate();
			return;
		}
		FModuleList = fdata->Get("modulelist")->JsonValue->Value();
		FSoftName = fdata->Get("softname")->JsonValue->Value();
		FVersion = fdata->Get("version")->JsonValue->Value();

		FftpInteranetIP = fdata->Get("ftpInteranetIP")->JsonValue->Value();
		FftpInternetIP = fdata->Get("ftpInternetIP")->JsonValue->Value();
		FftpUserName = fdata->Get("ftpUserName")->JsonValue->Value();
		FftpPassword = fdata->Get("ftpPassword")->JsonValue->Value();
		FftpPort = fdata->Get("ftpPort")->JsonValue->Value().ToInt();
		FftpNeedFTP = fdata->Get("ftpNeedFTP")->JsonValue->Value() == 1;
		FftpPassive = fdata->Get("ftpPassive")->JsonValue->Value() == 1;
		FUpdateURL  = fdata->Get("updateurl")->JsonValue->Value();
		// mail
		FMailServer = fdata->Get("mailServer")->JsonValue->Value();
		FSendEMail = fdata->Get("sendEmail")->JsonValue->Value();
		FMailUserName = fdata->Get("mailUserName")->JsonValue->Value();
		FMailPassword = fdata->Get("mailPassword")->JsonValue->Value();
		FMailPort = fdata->Get("mailPort")->JsonValue->Value().ToInt();

		if (FVersion.IsEmpty()) {
			s = "版本不匹配,系统将终止运行...";
			ShowMessage(s);
			Application->Terminate();
		}
	/*	else if ((DWORD)FVersion.SubString(1, 3).ToInt() != GetLocalVersion()) {
			s = "版本不匹配,系统将终止运行...";
			ShowMessage(s);
			Application->Terminate();
		}  */

		String sIsTrial = fdata->Get("IsTrial")->JsonValue->Value();
		if (sIsTrial.IsEmpty()) {
			FIsTrial = true;
		}
		else
			FIsTrial = sIsTrial.ToInt() == 1;

		String sdbType = fdata->Get("sysdbtype")->JsonValue->Value();
		if (!sdbType.IsEmpty()) {
			FSysDbType = sdbType.ToInt();
		}

		FDevCorp = fdata->Get("devcorp")->JsonValue->Value();
		FHomePage = fdata->Get("homepage")->JsonValue->Value();
		FEmail = fdata->Get("email")->JsonValue->Value();
		TJSONArray * AccList=(TJSONArray *)(fdata->Get("accbooks")->JsonValue);
		for (int i = 0; i < AccList->Size(); i++) {
		  TJSONObject* recdObject=(TJSONObject*)(AccList->Get(i));
			FAccBooks->AddNew();
			FAccBooks->FieldValues["accbookcode"] = recdObject->Get("syaccbookcode")->JsonValue->Value();
			FAccBooks->FieldValues["accbookname"] = recdObject->Get("syaccbookname")->JsonValue->Value();
			FAccBooks->Update();
		}
		FRecvAccBook = true;
		delete fdata;
	}
	catch (Exception &e) {
		s = "账套数据非法,系统将终止运行...";
		ShowMessage(s);
		Application->Terminate();
	}
}

// ---------------------------------------------------------------------------
// 接收界面数据

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::RefershUserCount() {
	TMsgStream *stream = new TMsgStream();
	try {
		FUserCount = stream->ValueAttribute["usercount"].ToInt();
		// 尚未处理
		// SendMessage(HWND_BROADCAST,msg_OnlineCount,0,0);
	}
	__finally {
		delete stream;
	}
}


// ---------------------------------------------------------------------------
void __fastcall TClientBroker::RefreshGlobeVar() {
 //增加调用，返回帐套全局变量
	TStream *ms=LoginUserClient->RefreshGlobeVar();
	ms->Position=0;
	TMsgStream *stream = new TMsgStream(ms);
	TClientDataSet *GlobeVarDataSet = new TClientDataSet(NULL);
	int index;
	try {
		if (stream->ValueAttribute["status"] == "s") {
			FAccDbType = stream->ItemAttribute["accdbtype"].ToInt();
			FUserName = stream->ItemAttribute["username"];
			FQQID=stream->ItemAttribute["qqid"];
			FQQPassword=stream->ItemAttribute["qqpassword"];
			FUserCode=stream->ItemAttribute["usercode"];
			FUserEmpID = stream->ItemAttribute["userempid"];
			FProjectLevel=stream->ItemAttribute["prjlevel"].ToInt();
			FIsSystemer=stream->ItemAttribute["systemer"].ToInt();
            //处理其他变量
			stream->SaveMasterToDataSet(GlobeVarDataSet);
			BuildGlobeVar(GlobeVarDataSet);

			index = FGlobeVarStr.Pos("\r\n");
			if (index > 0) {
				FGlobeVarStr.Insert(FUserCode + "\t" + FUserEmpID + "\t" +
					FUserName + "\t" + FIsSystemer + "\t", index + 2);
				FGlobeVarStr.Insert
					("usercode\tuseridcode\tusername\tissystemer\t", 1);
			}
			else
				FGlobeVarStr =
					"usercode\tuseridcode\tusername\tissystemer\r\n" +
					FUserCode + "\t" + FUserEmpID + "\t" + FUserName + "\t" +
					FIsSystemer + "\r\n";
			}
		}
		__finally
		{
			delete stream;
			delete GlobeVarDataSet;
        }

}
void __fastcall TClientBroker::BuildGlobeVar(TDataSet *DataSet) {
		FGlobeVarStr = "";
		if (DataSet->RecordCount > 0) {
			for (int i = 0; i < DataSet->FieldCount; i++) {
				if (i < DataSet->FieldCount - 1)
					FGlobeVarStr += DataSet->Fields->Fields[i]->FieldName + "\t";
				else
					FGlobeVarStr += DataSet->Fields->Fields[i]->FieldName + "\r\n";
			}
			DataSet->First();
			for (int i = 0; i < DataSet->FieldCount; i++) {
				if (i < DataSet->FieldCount - 1)
					FGlobeVarStr += DataSet->Fields->Fields[i]->AsString + "\t";
				else
					FGlobeVarStr += DataSet->Fields->Fields[i]->AsString + "\r\n";
			}
		}
		DataSet->Close();
}

// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::ShowForm(int modulecode, String param,
	bool bShow) {

/*	bool retval;
	HINSTANCE hInst;
	typedef int __stdcall(CALLBACK * HCREATECLIENTFORM)(HWND, int, HWND,
		TClientBroker*, Char*, Char*, Char*);
	HCREATECLIENTFORM CreateClientForm;
	String LibName, classcode, modulecaption;
	int formcode;
	String moduleright;
	int index, formid;
	TLocateOptions Opts;
	TForm *p;
	String WarnMsg, ErrorMsg;
	String lpBuffer;
	try {
		Opts.Clear();
		Opts << loCaseInsensitive;
		retval = FModuleRight->Locate("modulecode", Variant(modulecode), Opts);
		if (!retval) {
			ShowMessage("您没有授权操作该功能,访问拒绝!");
			return;
		}
		else {
			moduleright = FModuleRight->FieldByName("moduleright")->AsString;
			if (moduleright.IsEmpty()) {
			ShowMessage("您没有授权操作该功能,访问拒绝!");
				return;
			}
			try {
				formcode = FModuleRight->FieldByName("formcode")->AsInteger;
				modulecaption = FModuleRight->FieldByName("modulecaption")
					->AsString;
				classcode = FModuleRight->FieldByName("classcode")->AsString;
				LibName = FModuleRight->FieldByName("libname")->AsString;
				retval = FClientForms->LocateField("modulecode", modulecode);
				if (retval) {
					p = (TForm*)(FClientForms->FieldValues["formid"].ToInt());
					p->BringToFront();
					return;
				}
				index = LibName.Pos(".");
				if (index > 0)
					LibName = LibName.SubString(1, index - 1);
				retval = FClientLibs->LocateField("libcode",
					FModuleRight->FieldValues["libcode"]);
				if (retval) {
					hInst=(HINSTANCE)FClientLibs->FieldValues["hinst"].ToInt();
					FClientLibs->Edit();
					FClientLibs->FieldValues["count"] =
						FClientLibs->FieldValues["count"].ToInt() + 1;
					FClientLibs->Update();
				}
				else {
					LibName = ClientPath + LibName;
					if (FileExists(LibName + ".DLL")) {
						LibName = LibName + ".DLL";
						hInst = (HINSTANCE)LoadLibrary(LibName.c_str());
					}
					else {
						LibName = LibName + ".BPL";
						hInst = (HINSTANCE)LoadPackage(LibName);
					}
					if (hInst == NULL) {
						WarnMsg = "载入文件[" + LibName + "]失败!";
						ShowMessage(WarnMsg);
						return;
					}
					FClientLibs->AddNew();
					FClientLibs->FieldValues["libcode"] =
						FModuleRight->FieldByName("libcode")->AsString;
					FClientLibs->FieldValues["hinst"] = String((int)hInst);
					FClientLibs->FieldValues["count"] = "1";
					FClientLibs->FieldValues["libname"] = LibName;
					FClientLibs->Update();
				}
				CreateClientForm = (HCREATECLIENTFORM)GetProcAddress(hInst,
					"CreateClientForm");
				if (CreateClientForm == NULL) {
					ShowMessage("读取系统接口函数失败!");
					return;
				}
				else {
					// formid=CreateClientForm(FAOwner,formcode,FHandle,classcode.c_str(),param.c_str(),FGlobeVarStr.c_str());
					formid = CreateClientForm(NULL, formcode, NULL, this,
						String(modulecode).c_str(), String(param).c_str(),
						String(FGlobeVarStr).c_str());
					if (formid == 0) {
							ShowMessage("当前系统未注册该功能!");
					}
					else if (formid == -1) {
							ShowMessage("创建窗体过程错误,请检查!");
					}
					else if (formid > 0) {
						FClientForms->AddNew();
						FClientForms->FieldValues["modulecode"] = modulecode;
						FClientForms->FieldValues["modulecaption"] =
							modulecaption;
						FClientForms->FieldValues["formcode"] = formcode;
						FClientForms->FieldValues["formid"] = formid;
						FClientForms->FieldValues["libhinst"] =
							String((int)hInst);
						FClientForms->Update();
						p = (TForm*)formid;
						if (bShow)
							p->Show();
						// SendMessage(Application->MainForm->Handle,WM_FORMS_CHANGED,formid,0);
//						PostMessage(Application->MainForm->Handle,WM_FORMS_CHANGED, formid, 0);
					}
				}
			}
			__finally {
			}
		}
	}
	catch (Exception &e) {
		ShowMessage(("创建窗体错误," + e.Message));
	}  */
}

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::ShowFormModal(int modulecode, String param) {

/*	bool retval = false;
	HINSTANCE hInst;
	typedef int __stdcall(CALLBACK * HCREATECLIENTFORM)(HWND, int, HWND,
		TClientBroker*, Char*, Char*, Char*);
	HCREATECLIENTFORM CreateClientForm;
	String LibName, classcode, modulecaption;
	int formcode;
	String moduleright;
	int index, formid;
	TLocateOptions Opts;
	TForm *p;
	String WarnMsg, ErrorMsg;
	String lpBuffer;
	try {
		Opts.Clear();
		Opts << loCaseInsensitive;
		retval = FModuleRight->Locate("modulecode", Variant(modulecode), Opts);
		if (!retval) {
			ShowMessage("你没有操作权限!");
			return;
		}
		else {
			moduleright = FModuleRight->FieldByName("moduleright")->AsString;
			if (moduleright.IsEmpty()) {
				ShowMessage("你没有授权操作该功能,访问拒绝!");
				return;
			}
			formcode = FModuleRight->FieldByName("formcode")->AsInteger;
			// moduleright=FModuleRight->FieldByName("moduleright")->AsInteger;
			modulecaption = FModuleRight->FieldByName("modulecaption")
				->AsString;
			classcode = FModuleRight->FieldByName("classcode")->AsString;
			LibName = FModuleRight->FieldByName("libname")->AsString;
			index = LibName.Pos(".");
			if (index > 0)
				LibName = LibName.SubString(1, index - 1);

			retval = FClientLibs->LocateField("libcode",
				FModuleRight->FieldValues["libcode"]);
			if (retval) {
				hInst=(HINSTANCE)FClientLibs->FieldValues["hinst"].ToInt();
				FClientLibs->Edit();
				FClientLibs->FieldValues["count"] =
					FClientLibs->FieldValues["count"].ToInt() + 1;
				FClientLibs->Update();
			}
			else {
				LibName = ClientPath + LibName;
				if (FileExists(LibName + ".DLL")) {
					LibName = LibName + ".DLL";
					hInst = (HINSTANCE)LoadLibrary(LibName.c_str());
				}
				else {
					LibName = LibName + ".BPL";
					hInst = (HINSTANCE)LoadPackage(LibName);
				}
				if (hInst == NULL) {
					WarnMsg = "载入文件[" + LibName + "]失败!";
					ShowMessage(WarnMsg);
				return;
				}
				FClientLibs->AddNew();
				FClientLibs->FieldValues["libcode"] =
					FModuleRight->FieldByName("libcode")->AsString;
				FClientLibs->FieldValues["hinst"] = String((int)hInst);
				FClientLibs->FieldValues["count"] = "1";
				FClientLibs->FieldValues["libname"] = LibName;
				FClientLibs->Update();
			}
			CreateClientForm = (HCREATECLIENTFORM)GetProcAddress(hInst,
				"CreateClientForm");
			if (CreateClientForm == NULL) {
				ShowMessage("读取系统接口函数失败!");
				return;
			}
			else {
				// formid=CreateClientForm(FAOwner,formcode,FHandle,classcode.c_str(),param.c_str(),FGlobeVarStr.c_str());
				formid = CreateClientForm(NULL, formcode, NULL, this,
					String(modulecode).c_str(), String(param).c_str(),
					String(FGlobeVarStr).c_str());
				if (formid == 0) {
						ShowMessage("当前系统未注册该功能!");
				}
				else if (formid == -1) {
						ShowMessage("创建窗体过程错误,请检查!");
				}
				else if (formid > 0) {
					FClientForms->AddNew();
					FClientForms->FieldValues["modulecode"] = modulecode;
					FClientForms->FieldValues["modulecaption"] = modulecaption;
					FClientForms->FieldValues["formcode"] = formcode;
					FClientForms->FieldValues["formid"] = formid;
					FClientForms->FieldValues["libhinst"] = String((int)hInst);
					FClientForms->Update();
					p = (TForm*)formid;
					// if(FileExists("HYWY.ico"))
					// p->Icon->LoadFromFile("HYWY.ico");
					// SendMessage(Application->MainForm->Handle,WM_FORMS_CHANGED,formid,0);
					// PostMessage(Application->MainForm->Handle,WM_FORMS_CHANGED,formid,0);
					p->Visible = false;
					p->ShowModal();
				}
			}
		}
	}
	catch (Exception &e) {
		ShowMessage("创建窗体错误," + e.Message);
	}  */
}

// ---------------------------------------------------------------------------
void __fastcall TClientBroker::ShowFormModalByFormCode(int formcode,
	String param) {
/*	bool retval;
	int ModuleCode;
	HINSTANCE hInst;
	typedef int __stdcall(CALLBACK * HCREATECLIENTFORM)(HWND, int, HWND,
		TClientBroker*, Char*, Char*, Char*);
	HCREATECLIENTFORM CreateClientForm;
	String LibName, classcode, modulecaption;
	String moduleright;
	int index, formid;
	TLocateOptions Opts;
	TForm *p;
	String WarnMsg, ErrorMsg;
	String lpBuffer;
	try {
		Opts.Clear();
		Opts << loCaseInsensitive;
		retval = FModuleRight->Locate("formcode", Variant(formcode), Opts);
		if (!retval) {
			ShowMessage("你没有操作权限!");
			return;
		}
		else {
			// moduleright=FModuleRight->FieldByName("moduleright")->AsString;
			// if(moduleright.IsEmpty())
			// {
			// MessageBox(FAOwner,"你没有授权操作该功能,访问拒绝!","提示",MB_ICONWARNING);
			// return;
			// }
			ModuleCode = FModuleRight->FieldByName("moduleCode")->AsInteger;
			// moduleright=FModuleRight->FieldByName("moduleright")->AsInteger;
			modulecaption = FModuleRight->FieldByName("modulecaption")
				->AsString;
			classcode = FModuleRight->FieldByName("classcode")->AsString;
			LibName = FModuleRight->FieldByName("libname")->AsString;
			index = LibName.Pos(".");
			if (index > 0)
				LibName = LibName.SubString(1, index - 1);

			retval = FClientLibs->LocateField("libcode",
				FModuleRight->FieldValues["libcode"]);
			if (retval) {
				hInst=(HINSTANCE)FClientLibs->FieldValues["hinst"].ToInt();
				FClientLibs->Edit();
				FClientLibs->FieldValues["count"] =
					FClientLibs->FieldValues["count"].ToInt() + 1;
				FClientLibs->Update();
			}
			else {
				LibName = ClientPath + LibName;
				if (FileExists(LibName + ".DLL")) {
					LibName = LibName + ".DLL";
					hInst = (HINSTANCE)LoadLibrary(LibName.c_str());
				}
				else {
					LibName = LibName + ".BPL";
					hInst = (HINSTANCE)LoadPackage(LibName);
				}
				if (hInst == NULL) {
					WarnMsg = "载入文件[" + LibName + "]失败!";
					ShowMessage(WarnMsg);
					return;
				}
				FClientLibs->AddNew();
				FClientLibs->FieldValues["libcode"] =
					FModuleRight->FieldByName("libcode")->AsString;
				FClientLibs->FieldValues["hinst"] = String((int)hInst);
				FClientLibs->FieldValues["count"] = "1";
				FClientLibs->FieldValues["libname"] = LibName;
				FClientLibs->Update();
			}
			CreateClientForm = (HCREATECLIENTFORM)GetProcAddress(hInst,
				"CreateClientForm");
			if (CreateClientForm == NULL) {
				ShowMessage("读取系统接口函数失败!");
				return;
			}
			else {
				formid = CreateClientForm(NULL, formcode, NULL, this,
					String(ModuleCode).c_str(), String(param).c_str(),
					String(FGlobeVarStr).c_str());
				if (formid == 0) {
						ShowMessage("当前系统未注册该功能!");
				}
				else if (formid == -1) {
						ShowMessage("创建窗体过程错误,请检查!");

				}
				else if (formid > 0) {
					p = (TForm*)formid;
					p->Visible = false;
					p->ShowModal();
				}
			}
		}
	}
	catch (Exception &e) {
		ShowMessage("创建窗体错误," + e.Message);
	} */
}

void __fastcall TClientBroker::CloseForm(int formid) {
	bool retval;
	String libcode;
	try {
		retval = FClientForms->LocateField("formid", formid);
		if (retval) {
			FClientForms->DelRecord();
		   //	PostMessage(Application->MainForm->Handle, WM_FORMS_CHANGED,formid, 1);
		}
	}
	catch (Exception &e) {
		ShowMessage("开闭窗体错误," + e.Message);
	}
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
bool __fastcall TClientBroker::get_Active() {
   return	DSConnection->Connected;

}

// ---------------------------------------------------------------------------
String __fastcall TClientBroker::get_DevCorp() {
	return FDevCorp;
}

// ---------------------------------------------------------------------------
String __fastcall TClientBroker::get_SoftName() {
	return FSoftName;
}

// ---------------------------------------------------------------------------
String __fastcall TClientBroker::get_Version() {
	return FVersion;
}

// ---------------------------------------------------------------------------
String __fastcall TClientBroker::get_HomePage() {
	return FHomePage;
}

// ---------------------------------------------------------------------------
String __fastcall TClientBroker::get_Email() {
	return FEmail;
}

// ---------------------------------------------------------------------------
int __fastcall TClientBroker::get_UserCount() {
	return FUserCount;
}
// ---------------------------------------------------------------------------

bool __fastcall TClientBroker::GetConnected() {
	return (DSConnection->Connected) && FRecvAccBook;
}

 // ---------------------------------------------------------------------------
void __fastcall TClientBroker::CloseAllForms() {
	if (FClientForms==NULL || FClientForms->RecordCount == 0)
		return;
	FClientForms->First();
	while (!FClientForms->Eof) {
		TForm* pForm = (TForm*)
			(FClientForms->FieldValues["formid"].ToInt());
		if (pForm != NULL) {
		   delete pForm;
		}
		FClientForms->Next();
	}
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::AppOnConnect(TObject * Sender) {
	ClientBrokerStatus = 1;
	LoginUserClient=new TLoginUserClient(DSConnection->DBXConnection,false);
	GetAccList();
	FAppConnected = true;
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::AppOnDisConnect(TObject * Sender) {
	FAppConnected = false;
	LoginUserClient=NULL;
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::SetLogonCode(String Value) {
	FLogonCode = Value;
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::SetUserCode(String Value) {
	FUserCode = Value;
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::ReConnetToAgentAndApp() {
	TfsScreenCursor * ScreenCursor=new TfsScreenCursor();
	try {
			DSConnection->Close();
			DSConnection->Open();
		   if (DSConnection->Connected) {
			   String errMsg;
			   FAppConnected=LoginUserClient->IsValidUser(FLogonCode,FPassword,FAccBookID,errMsg);
			}

	}
	__finally {
		delete ScreenCursor;
	}
}
// ---------------------------------------------------------------------------
void __fastcall TClientBroker::SetHookCallBack(THookMsgCallback Value)
{
   if(MsgCallBack)
   {
	 MsgCallBack->HookCallBack=Value;
   }
}
// ---------------------------------------------------------------------------
THookMsgCallback __fastcall TClientBroker::GetHookCallBack()
{
	 if(MsgCallBack)
	  return MsgCallBack->HookCallBack;
	 else
	  return NULL;
}
// ---------------------------------------------------------------------------
TJSONArray* __fastcall TClientBroker::GetUserList()
{
	if(LoginUserClient)
	{
	 TJSONArray *retArray= LoginUserClient->GetUserList();
	 return (TJSONArray *)(retArray->Clone());
	}
	else
	 return NULL;
}
// ---------------------------------------------------------------------------
TJSONArray* __fastcall TClientBroker::GetDepartmentAndUsersList()
{
 	if(LoginUserClient)
	{
	 TJSONArray *retArray= LoginUserClient->GetDepartmentAndUsersList();
	 return (TJSONArray *)(retArray->Clone());
	}
	else
	 return NULL;
}
