//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "JLoginUser.h"
#include "FSServerContainer.h"
#include "ADODataSetStream.h"
#include "SHConst.h"
#include "ChatRoomServerMethods.h"
#include "DecEnc.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
__fastcall TJLoginUser::TJLoginUser(TComponent* Owner)
	:TDMBaseServerClass(Owner)
{
	FLoginListDataSet   = new TADODataSet(NULL);
	m_Query->Connection = AccConnection;
	b_Query->Connection = SysConnection;
}
//---------------------------------------------------------------------------
 void __fastcall TJLoginUser::CreateLoginListDataSet()
{
	FLoginListDataSet->Close();
	FLoginListDataSet->FieldDefs->Clear();

	TFieldDef *pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "ThreadSessionId";
	pNewDef->DataType = ftInteger;
	pNewDef->Required = true;

 	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "CallBackClientID";
	pNewDef->DataType = ftString;
	pNewDef->Size = 40;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "UserLoginCode";
	pNewDef->DataType = ftString;
	pNewDef->Size = 20;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "UserID";
	pNewDef->DataType = ftString;
	pNewDef->Size = 40;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "UserCode";
	pNewDef->DataType = ftString;
	pNewDef->Size = 40;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "UserName";
	pNewDef->DataType = ftString;
	pNewDef->Size = 100;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "IP";
	pNewDef->DataType = ftString;
	pNewDef->Size = 50;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "AccBookID";
	pNewDef->DataType = ftString;
	pNewDef->Size = 20;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "LoginTime";
	pNewDef->DataType = ftDateTime;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "AccDbType";
	pNewDef->DataType = ftInteger;

	pNewDef = FLoginListDataSet->FieldDefs->AddFieldDef();
	pNewDef->Name = "SysDbType";
	pNewDef->DataType = ftInteger;

	FLoginListDataSet->IndexDefs->Clear();
	FLoginListDataSet->IndexDefs->Add("tableindex", "ThreadSessionId", TIndexOptions() << ixPrimary << ixUnique << ixCaseInsensitive);
	FLoginListDataSet->CreateDataSet();
}
//---------------------------------------------------------------------------
__fastcall TJLoginUser::~TJLoginUser()
{
	delete FLoginListDataSet;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::IsValidUser(String UserCode,String Password,String AccbookID,String &msg)
{
	return DMServerContainer->IsValidUser(UserCode,Password,AccbookID,msg);
}
//---------------------------------------------------------------------------
void __fastcall TJLoginUser::Logout()
{
	TDSSession *threadSession = TDSSessionManager::Instance->GetThreadSession();
	if(threadSession)
		DMServerContainer->RemoveUser(threadSession);
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::ListOfLoginUser()
{
	CreateLoginListDataSet();
	DMServerContainer->ListOfLoginUser(FLoginListDataSet,false);
	TADODataSetStream *ADOStream = new TADODataSetStream(FLoginListDataSet);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::ListOfAllLoginUser()
{
	CreateLoginListDataSet();
	DMServerContainer->ListOfLoginUser(FLoginListDataSet);
	TADODataSetStream *ADOStream = new TADODataSetStream(FLoginListDataSet);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONArray* __fastcall TJLoginUser::GetUserList()
{
	return DMServerContainer->GeTJLoginUserList(false);
}
//---------------------------------------------------------------------------
TJSONArray* __fastcall TJLoginUser::GetAllUserList()
{
	return DMServerContainer->GeTJLoginUserList();
}
//---------------------------------------------------------------------------
String __fastcall TJLoginUser::GetSysConnectionString()
{
	return DMServerContainer->SysADOConnection->ConnectionString;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::ChangePassword(String UserCode,String OldPassword,String NewPassword,String &msg)
{
	bool bresult = false;
	String OPassword = EncryptAES(OldPassword);
	String NPassword = EncryptAES(NewPassword);
	if(NewPassword.Trim().IsEmpty())
	{
		msg = "新口令不能为空！";
		return bresult;
	}

	m_Query->Close();
	m_Query->SQL->Text= "select * from tbUser where Upper(UserIDCode)="+QuotedStr(UserCode.UpperCase())+" and UserPassword="+QuotedStr(OPassword);
	m_Query->Open();
	if(m_Query->RecordCount==1)
	{
		m_Query->Edit();
		m_Query->FieldValues["UserPassword"] = NPassword;
		m_Query->Post();
		bresult = true;
	}
	else
	{
		msg = "旧密码错误，用户口令修改失败!";
	}
	return bresult;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetClassList()
{
	b_Query->Close();
	b_Query->SQL->Text = "select SyMCOwnCode,SyMCCode,SyMCTitle,SyMLTitle from SyMiddleClass left join SyMiddleLib on SyMiddleClass.SyMCOwnCode=SyMiddleLib.SyMLCode where SyMCSelfDefCode=1 order by SyMCOwnCode";
	b_Query->Open();
	TADODataSetStream *ADOStream = new TADODataSetStream(b_Query);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetAutoCodeFields()
{
	b_Query->Close();
	b_Query->SQL->Text = "select SyMFClassCode,SyMFFieldName,SyMFDataType,SyMFNo,SyMFTitle from SyMCMasterField where SyMFPartOfCode=1 order by SyMFClassCode,SyMFNo";
	b_Query->Open();
	TADODataSetStream *ADOStream = new TADODataSetStream(b_Query);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetAccList()
{
	TMemoryStream* ms = new TMemoryStream();
	TMsgStream* msg = DMServerContainer->GetAccInformation();
	msg->SaveToStream(ms);
	ms->Position = 0;
	return ms;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetAccListJSON()
{
	return DMServerContainer->GetAccInforJSON();
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetModuleData()
{
	TJLoginUserRecord *cuser = GetCurLoginUser();
	String sqlstr;
	m_Query->Close();
	if(cuser->AccDbType==1)
		sqlstr = "exec GetModule " + QuotedStr(cuser->UserCode);
	else
		sqlstr = "{call PKG_Foresight_PMS.GetModule(" + QuotedStr(cuser->UserCode) + ")}";
	m_Query->SQL->Text = sqlstr;
	m_Query->Open();
	TADODataSetStream *ADOStream = new TADODataSetStream(m_Query);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::RefreshGlobeVar()
{
	TJLoginUserRecord *cuser = GetCurLoginUser();
	TMemoryStream *ms = new TMemoryStream();
	TMsgStream *sxs = new TMsgStream();
	try
	{
		sxs->ValueAttribute["status"]   = "s";
		sxs->ItemAttribute["accdbtype"] = cuser->AccDbType;
		sxs->ItemAttribute["username"]  = cuser->UserName;
		m_Query->Close();
		m_Query->SQL->Text = " select tbUser.*, tbemployeedata.* from tbUser"
												 " left join tbemployeedata on Upper(tbUser.UserIDCode)=Upper(tbemployeedata.EmpNum)"
												 " where Upper(UserLogonCode)=" + QuotedStr(cuser->UserLoginCode.UpperCase());
		m_Query->Open();
		sxs->ItemAttribute["qqid"]      = m_Query->FieldByName("UserLanguage")->AsString;
		sxs->ItemAttribute["qqpassword"]= m_Query->FieldByName("UserPassword")->AsString;
		sxs->ItemAttribute["usercode"]  = m_Query->FieldByName("UserIDCode")->AsString;
		sxs->ItemAttribute["userempid"] = m_Query->FieldByName("EmpPKID")->AsString;
		sxs->ItemAttribute["prjlevel"]  = DMServerContainer->PrjLevel;
		sxs->ItemAttribute["systemer"]  = 0;
		m_Query->Close();
		m_Query->SQL->Text ="select * from vi_SysGlobVar";
		m_Query->Open();
		sxs->LoadMasterFromDataSet(m_Query);
		sxs->SaveToStream(ms);
		ms->Position = 0;
	}
	__finally
	{
		delete sxs;
	}
	return ms;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetModuleRight()
{
	TJLoginUserRecord *cuser = GetCurLoginUser();
	String sqlstr;
	m_Query->Close();
	if(cuser->AccDbType==1)
		sqlstr = "exec GetRight " + QuotedStr(cuser->UserCode);
	else
		sqlstr = "{call PKG_Foresight_PMS.GetRight(" + QuotedStr(cuser->UserCode) + ")}";
	m_Query->SQL->Text = sqlstr;
	m_Query->Open();
	TADODataSetStream *ADOStream = new TADODataSetStream(m_Query);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetCurUserInfo()
{
	TJLoginUserRecord *cuser = GetCurLoginUser();
	m_Query->Close();
	m_Query->SQL->Text = " select tbUser.*, tbemployeedata.* from tbUser"
											 " left join tbemployeedata on Upper(tbUser.UserIDCode)=Upper(tbemployeedata.EmpNum)"
											 " where Upper(UserLogonCode)=" + QuotedStr(cuser->UserLoginCode.UpperCase());
	m_Query->Open();
	TADODataSetStream *ADOStream = new TADODataSetStream(m_Query);
	ADOStream->Position = 0;
	return ADOStream;
}
//---------------------------------------------------------------------------
TJSONObject* __fastcall TJLoginUser::GetCurUserJsion()
{
	TJLoginUserRecord *cuser = GetCurLoginUser();
	if(cuser)
		return cuser->ObjectToJSON();
	else
		return NULL;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::UpdateCurUserCallbackClientID(String const Value)
{
	String FCallbackIdTrimmed = Trim(Value);
	if(FCallbackIdTrimmed == EmptyStr) return false;
	TJLoginUserRecord * curUser = GetCurLoginUser();
	if(curUser==NULL) return false;
	curUser->CallBackClientID = FCallbackIdTrimmed;
	return true;
}
//---------------------------------------------------------------------------
void __fastcall TJLoginUser::SetUsersToFollow(TJSONArray* Users)
{
	TJLoginUserRecord * curUser = GetCurLoginUser();
	if(curUser==NULL) return;
	curUser->FollowList->Clear();
	TJSONString *jsonstring;
	for(int i=0;i<Users->Size();i++)
	{
		jsonstring = (TJSONString*)Users->Get(i);
		curUser->FollowList->Add(jsonstring->Value());
	}
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendMessageToFollow(String const Msg)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendMessageToFollow(Msg);
	}
	__finally
	{
//		delete FChatRoomServerMethods;
	}
	return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendMessageToAll(String const Msg)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendMessageToAll(Msg);
  }
  __finally
  {
	//delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendMessageToUser(String const Msg, String const UserID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendMessageToUser(Msg,UserID);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendMessageToDepartment(String const Msg, String const DepartmentID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendMessageToDepartment(Msg,DepartmentID);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendMessageToGroup(String const Msg, String const GroupID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendMessageToGroup(Msg,GroupID);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendCMDToFollow(String const cmdStr)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendCMDToFollow(cmdStr);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendCMDToAll(String const cmdStr)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendCMDToAll(cmdStr);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendCMDToUser(String const cmdStr, String const UserID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendCMDToUser(cmdStr,UserID);
	}
	__finally
	{
	//delete FChatRoomServerMethods;
	}
	return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendCMDToDepartment(String const cmdStr, String const DepartmentID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendCMDToDepartment(cmdStr,DepartmentID);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
bool __fastcall TJLoginUser::SendCMDToGroup(String const cmdStr, String const GroupID)
{
	bool result = false;
	TChatRoomServerMethods * FChatRoomServerMethods = new TChatRoomServerMethods(this);
	try
	{
		result = FChatRoomServerMethods->SendCMDToGroup(cmdStr,GroupID);
  }
  __finally
  {
  //delete FChatRoomServerMethods;
  }
  return result;
}
//---------------------------------------------------------------------------
TJSONArray* __fastcall TJLoginUser::GetDepartmentAndUsersList()
{
	//注意，下面算法没有考虑Blob字段。
	TJSONArray *retArray = new TJSONArray();
	TJSONObject *itemJson;

  m_Query->Close();
	m_Query->SQL->Text = " select corpognpkid as id,corpogndeptname as name,corpognfkid_upper as parent,corpognsortcode as sortcode,corpogndeptnum as code,1 as type from tbcorporationorganize"
											 " union all"
											 " select emppkid as id,empname as name,(select corpognpkid from tbcorporationorganize where corpognpkid=empdeptcodefkid ) as parent,(select corpognsortcode+corpognpkid from tbcorporationorganize where corpognpkid=empdeptcodefkid)as sortcode,empnum as code,2 as type from tbemployeedata"
											 " order by sortcode,code";
	m_Query->Open();
	while(!m_Query->Eof)
	{
		itemJson = new TJSONObject();
		for(int i=0;i<m_Query->FieldCount;i++)
		{
			itemJson->AddPair(new TJSONPair(m_Query->Fields->Fields[i]->FieldName,m_Query->Fields->Fields[i]->AsString));
		}
		retArray->AddElement(itemJson);
		m_Query->Next();
  }
	return retArray;
}
//---------------------------------------------------------------------------
