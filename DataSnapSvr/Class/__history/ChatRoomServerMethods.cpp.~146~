//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "ChatRoomServerMethods.h"
#include "FSServerContainer.h"
#include "ChatRoomServer.h"
#include "SHConst.h"
//约定
//ChannelName="Channel"+AccBookID; 不同帐套创建不同标识
//ClientID=UserID
//CallbackID=GUID(),CreateGUID，GUIDToString由客户端传送 UpdateCurUserCallbackID
//---------------------------------------------------------------------------
#pragma package(smart_init)
__fastcall TChatRoomServerMethods:: TChatRoomServerMethods(TComponent* Owner)
:TDMBaseServerClass(Owner)
{
	m_Query = new TADOQuery(NULL);
	m_Query->ParamCheck = false;
	m_Query->EnableBCD = false;
	m_Query->CommandTimeout = 60;

	b_Query = new TADOQuery(NULL);
	b_Query->ParamCheck = false;
	b_Query->EnableBCD = false;
	b_Query->CommandTimeout = 60;

	LogQuery = new TADOQuery(NULL);
	LogQuery->ParamCheck = false;
 	m_Connection = this->AccConnection;
	m_Query->Connection = m_Connection;

	m_BuildConn = this->SysConnection;
	b_Query->Connection = m_BuildConn;
	LogQuery->Connection = m_BuildConn;

	EmpQuery = new TADOQuery(this);
	EmpQuery->Connection = m_Connection;
}
//---------------------------------------------------------------------------
__fastcall TChatRoomServerMethods:: ~TChatRoomServerMethods()
{
	delete EmpQuery;
	delete m_Query;
	delete b_Query;
	delete LogQuery;
}
//---------------------------------------------------------------------------
String  TChatRoomServerMethods::GetHTMLEscapedString(String const Value)
{
  TReplaceFlags Flags;
	Flags << rfReplaceAll;
  String Result = Value;
  Result = StringReplace(Result, "&", "&amp;", Flags);
  Result = StringReplace(Result, "\"", "&quot;", Flags);
  Result = StringReplace(Result, "<", "&lt;", Flags);
  Result = StringReplace(Result, ">", "&gt;", Flags);
	return Result;
}
//---------------------------------------------------------------------------
TJSONArray*  TChatRoomServerMethods::GetUserList()
{
	return DMServerContainer->GetLoginUserList();
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::UpdateCurUserCallbackClientID(String const Value)
{
	String FCallbackIdTrimmed = Trim(Value);
	if(FCallbackIdTrimmed == EmptyStr) return false;
	TLoginUserRecord *curUser = GetCurLoginUser();
	if(curUser==NULL) return false;
	curUser->CallBackClientID = FCallbackIdTrimmed;
	return true;
}
//---------------------------------------------------------------------------
void  TChatRoomServerMethods::SaveMessage(String MsgID,String MsgUserID,int MsgRecType,String MsgReceiver,String MsgContent)
{
	try
	{
		TLoginUserRecord *UserRec = GetCurLoginUser();
		EmpQuery->Close();
		EmpQuery->SQL->Clear();
		switch (UserRec->AccDbType)
		{
			case 1:
				EmpQuery->SQL->Text = "exec tbMessageRecords_update '"+MsgID+"','"+MsgUserID+"',"+IntToStr(MsgRecType)+",'"+MsgReceiver+"','"+MsgContent+"','"+FormatDateTime("YYYY-MM-DD HH:MM:SS",Now())+"'";
				break;
			case 2:
				EmpQuery->SQL->Text = "{call tbMessageRecords_update('"+MsgID+"','"+MsgUserID+"',"+IntToStr(MsgRecType)+",'"+MsgReceiver+"','"+MsgContent+"','"+FormatDateTime("YYYY-MM-DD HH:MM:SS",Now())+"')}";
				break;
		}
		EmpQuery->ExecSQL();
		EmpQuery->Close();
	}
	catch(Exception &e)
	{
		throw Exception(e.Message);
	}
}
//---------------------------------------------------------------------------
void  TChatRoomServerMethods::SaveMsgToReceiver(String MsgID,String UserID,int online)
{
	try
	{
		TLoginUserRecord *UserRec = GetCurLoginUser();
		EmpQuery->Close();
		EmpQuery->SQL->Clear();
		switch (UserRec->AccDbType)
		{
			case 1:
				EmpQuery->SQL->Text = "exec tbMissMember_insert "+QuotedStr(MsgID)+","+QuotedStr(UserID)+","+IntToStr(online);
				break;
			case 2:
				EmpQuery->SQL->Text = "{call tbMissMember_insert("+QuotedStr(MsgID)+","+QuotedStr(UserID)+","+IntToStr(online)+")}";
				break;
		}
		EmpQuery->ExecSQL();
		EmpQuery->Close();
	}
	catch(Exception &e)
	{
		throw Exception(e.Message);
	}
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMessageToAll(String const Msg)
{
	String MesgTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONObject *JSONMsg;
	MesgTrimmed = Trim(Msg);

  //no message to send, so just exit
	if(Msg == EmptyStr)
		return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL)
		return false;
	TGUID msgGuid;
	CreateGUID(msgGuid);
	String MsgID = GUIDToString(msgGuid);

	//需要判断是否是同一个帐套，如果不是同一个帐套的用户不发送
	//先保存消息，然后逐个判断是否登录 ,未完全实现
	SaveMessage(MsgID,curUser->UserID,0,"0",MesgTrimmed);
	SaveMsgToReceiver(MsgID,curUser->UserID,1);//给自己存一分

	m_Query->Close();
	m_Query->SQL->Text="select EmpPKID from tbEmployeeData where EmpState=1";
	m_Query->Open();
	while(!m_Query->Eof)
	{
		String UserID = m_Query->FieldByName("EmpPKID")->AsString;
		if(AnsiCompareText(curUser->UserID, UserID) != 0) //不是本人
		{
			RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
			if(RecUser==NULL)
			   SaveMsgToReceiver(MsgID,UserID);
			else
			  SaveMsgToReceiver(MsgID,UserID,1);
		}
		m_Query->Next();
	}
	m_Query->Close();

  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "message"));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "0"));
	JSONMsg->AddPair(new TJSONPair("to", "0"));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("message", MesgTrimmed));

  //Send the message to all logged in users
  return DMServerContainer->FSDSServer->BroadcastMessage(SMessageChannel+curUser->AccBookID, SMsgCallback, JSONMsg);
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMessageToUser(String const Msg,	String const UserID)
{
	TJSONValue *Resp = NULL;
  String MesgTrimmed;
	TLoginUserRecord * curUser = NULL;
	TLoginUserRecord * RecUser = NULL;
	TJSONObject *JSONMsg = NULL;
	bool result = false;
	MesgTrimmed = Trim(Msg);

  //no message to send, so just exit
	if(Msg == EmptyStr) return false;

	//get the current session
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

	//不能发送给自己
	if(AnsiCompareText(curUser->UserID, UserID) == 0) return false;

 //需要判断是否是同一个帐套，是否登录，如果用户没登录，不发送，则保存
	RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
		//保存消息
		TGUID msgGuid;
		CreateGUID(msgGuid);
		String MsgID = GUIDToString(msgGuid);
		SaveMessage(MsgID,curUser->UserID,2,UserID,MesgTrimmed);
   if(RecUser==NULL)
		SaveMsgToReceiver(MsgID,UserID,0);
	else
		SaveMsgToReceiver(MsgID,UserID,1);
		SaveMsgToReceiver(MsgID,curUser->UserID,1);//给自己存一分


		//wrap the message in a JSON object
		JSONMsg = new  TJSONObject();
		JSONMsg->AddPair(new TJSONPair("notificationType", "message"));
		JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
		JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
		JSONMsg->AddPair(new TJSONPair("msgtype", "2"));
		JSONMsg->AddPair(new TJSONPair("to",UserID ));
		JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
		JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
		JSONMsg->AddPair(new TJSONPair("message", MesgTrimmed));
		//Send the message to myself 换一下角度，以方便前台传递正确的窗体
		TJSONObject *myJsonMsg=(TJSONObject*)( JSONMsg->Clone());
		myJsonMsg->RemovePair("from");
		myJsonMsg->AddPair(new TJSONPair("from",UserID ));
		DMServerContainer->FSDSServer->NotifyCallback(curUser->CallBackClientID, SMsgCallback, myJsonMsg, Resp);
	   if(RecUser)
		{		//Send the message to logged in user
		result = DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, JSONMsg, Resp);
		}
	   if(result&&Resp!=NULL)
		 Resp->Free();
	   return result;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMessageToDepartment(String const Msg, String const DepartmentID)
{
	String MesgTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	TJSONObject *JSONMsg;
	MesgTrimmed = Trim(Msg);
	bool allSender = true;
	bool curSender = false;

  //no message to send, so just exit
	if(Msg == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;
	TGUID msgGuid;
	CreateGUID(msgGuid);
	String MsgID = GUIDToString(msgGuid);

	//需要判断是否是同一个帐套，如果不是同一个帐套的用户不发送
	//先保存消息，然后逐个判断是否登录
	SaveMessage(MsgID,curUser->UserID,1,DepartmentID,MesgTrimmed);
	SaveMsgToReceiver(MsgID,curUser->UserID,1);//给自己存一分
  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "message"));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "1"));
	JSONMsg->AddPair(new TJSONPair("to", DepartmentID));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("message", MesgTrimmed));

	//Send the message to myself  ，有可能给其他部门发送消息，自己不在该部门
	DMServerContainer->FSDSServer->NotifyCallback(curUser->CallBackClientID, SMsgCallback, (TJSONObject*)( JSONMsg->Clone()), Resp);

	m_Query->Close();
	m_Query->SQL->Text="select EmpPKID from tbEmployeeData where EmpState=1 and EmpDeptCodeFKID="+QuotedStr(DepartmentID);
	m_Query->Open();
	while(!m_Query->Eof)
  {
		String UserID = m_Query->FieldByName("EmpPKID")->AsString;
		if(AnsiCompareText(curUser->UserID, UserID) != 0)   //不是本人
		{
			RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
			if(RecUser==NULL)
				SaveMsgToReceiver(MsgID,UserID);  //没在线
			else
			{
				SaveMsgToReceiver(MsgID,UserID,1);
				if(AnsiCompareText(curUser->UserID, UserID) != 0)  //避免重复发送
				{
					curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback,(TJSONObject*)( JSONMsg->Clone()), Resp));
					allSender = allSender || curSender;
					if(curSender&&Resp!=NULL)
					   Resp->Free();
				}
			}
		}
		m_Query->Next();
	}
	m_Query->Close();
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMessageToGroup(String const Msg, String const GroupID)
{
	String MesgTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	TJSONObject *JSONMsg;
	MesgTrimmed = Trim(Msg);
	bool allSender = true;
	bool curSender = false;

  //no message to send, so just exit
	if(Msg == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;
	TGUID msgGuid;
	CreateGUID(msgGuid);
	String MsgID = GUIDToString(msgGuid);

	//需要判断是否是同一个帐套，如果不是同一个帐套的用户不发送
	//先保存消息，然后逐个判断是否登录
	SaveMessage(MsgID,curUser->UserID,3,GroupID,MesgTrimmed);
	SaveMsgToReceiver(MsgID,curUser->UserID,1);//给自己存一分
  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "message"));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "3"));
	JSONMsg->AddPair(new TJSONPair("to", GroupID));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("message", MesgTrimmed));

		//Send the message to myself
  //		DMServerContainer->FSDSServer->NotifyCallback(curUser->CallBackClientID, SMsgCallback, (TJSONObject*)( JSONMsg->Clone()), Resp);

	m_Query->Close();
	m_Query->SQL->Text="select EmpPKID from tbEmployeeData where EmpState=1 and EmpPKID in (select GroupMemberID from tbGroupMember where GroupMemberGroupID="+QuotedStr(GroupID)+")";
	m_Query->Open();
	while(!m_Query->Eof)
  {
		String UserID = m_Query->FieldByName("EmpPKID")->AsString;
	//	if(AnsiCompareText(curUser->UserID, UserID) != 0)   //不是本人
		{
			RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
			if(RecUser==NULL)
				SaveMsgToReceiver(MsgID,UserID);  //没在线
			else
			{
				SaveMsgToReceiver(MsgID,UserID,1);
				 curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, (TJSONObject*)(JSONMsg->Clone()), Resp));
				 allSender = allSender || curSender;
				 if(curSender&&Resp!=NULL)
					Resp->Free();
			}
		}
		m_Query->Next();
	}
	m_Query->Close();
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMessageToFollow(String const Msg)
{
	String MesgTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	MesgTrimmed = Trim(Msg);
	bool allSender = false;
	bool curSender = false;

  //no message to send, so just exit
	if(Msg == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;
	TGUID msgGuid;
	CreateGUID(msgGuid);
	String MsgID = GUIDToString(msgGuid);

	//需要判断是否是同一个帐套，如果不是同一个帐套的用户不发送
	//先保存消息，然后逐个判断是否登录
	SaveMessage(MsgID,curUser->UserID,0,"0",MesgTrimmed);
	SaveMsgToReceiver(MsgID,curUser->UserID,1);//给自己存一分
  //wrap the message in a JSON object
	for(int i=0;i<curUser->FollowList->Count;i++)
	{
		String UserID = curUser->FollowList->Strings[i];
		RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
		if(RecUser==NULL)
			SaveMsgToReceiver(MsgID,UserID);  //没在线
		else
		{
			SaveMsgToReceiver(MsgID,UserID,1);
	   //		if(AnsiCompareText(curUser->UserID, UserID) != 0)   给自己也发
			{
				TJSONObject *JSONMsg = new  TJSONObject();
				JSONMsg->AddPair(new TJSONPair("notificationType", "message"));
				JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
				JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
				JSONMsg->AddPair(new TJSONPair("msgtype", "2"));
				JSONMsg->AddPair(new TJSONPair("to", RecUser->UserID));
				JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
				JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
				JSONMsg->AddPair(new TJSONPair("message", MesgTrimmed));

				/********************************************************************
				//NotifyCallback方法可以回叫指定回叫通道中特定客户端识别以及回叫识别的客户端
				//参数序号  参数名称    参数说明
				//Params01: ChannelName 回叫通道名称;
				//Params02: ClientId    客户端识别;
				//Params03: CallbackId  回叫识别
				//Params04: Msg         传递的资讯;
				//Params05: Response    被回叫客户端的回传资讯
				********************************************************************/
				curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, JSONMsg, Resp));
				allSender = curSender || allSender;
				if(curSender&&Resp!=NULL)
					Resp->Free();
			}
		}
  }
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendCMDToFollow(String const cmdStr)
{
	String cmdTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	cmdTrimmed = Trim(cmdStr);
	bool allSender = false;
	bool curSender = false;

	//no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;

	//get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

  //wrap the message in a JSON object
  for(int i=0;i<curUser->FollowList->Count;i++)
  {
		String UserID = curUser->FollowList->Strings[i];
		RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
		if(RecUser)
		{
			if(AnsiCompareText(curUser->UserID, UserID) != 0)
			{
				TJSONObject* JSONMsg = new  TJSONObject();
				JSONMsg->AddPair(new TJSONPair("notificationType", "cmd"));
				JSONMsg->AddPair(new TJSONPair("cmd", cmdTrimmed));
				JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
				JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
				JSONMsg->AddPair(new TJSONPair("msgtype", "2"));
				JSONMsg->AddPair(new TJSONPair("to", RecUser->UserID));
				JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
				JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
				curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, JSONMsg, Resp));
				allSender = allSender || curSender;
				if(curSender&&Resp!=NULL)
					Resp->Free();
			}
		}
  }
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendCMDToAll(String const cmdStr)
{
	String cmdTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONObject *JSONMsg;
  	cmdTrimmed = Trim(cmdStr);
	bool allSender = false;

  //no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "cmd"));
	JSONMsg->AddPair(new TJSONPair("cmd", cmdTrimmed));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "0"));
	JSONMsg->AddPair(new TJSONPair("to", "0"));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
	allSender = DMServerContainer->FSDSServer->BroadcastMessage(SMessageChannel+curUser->AccBookID,SMsgCallback, JSONMsg);
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendCMDToUser(String const cmdStr, String const UserID)
{
	String cmdTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	TJSONObject *JSONMsg;
	cmdTrimmed = Trim(cmdStr);
	bool allSender = false;

	//no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

  //wrap the message in a JSON object
	RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
	if(RecUser)
	{
		if(AnsiCompareText(curUser->UserID, UserID) != 0)
		{
			JSONMsg = new  TJSONObject();
			JSONMsg->AddPair(new TJSONPair("notificationType", "cmd"));
			JSONMsg->AddPair(new TJSONPair("cmd", cmdTrimmed));
			JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
			JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
			JSONMsg->AddPair(new TJSONPair("msgtype", "2"));
			JSONMsg->AddPair(new TJSONPair("to", RecUser->UserID));
			JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
			JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));
			allSender = DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, JSONMsg, Resp);
			if(allSender&&Resp!=NULL)
				Resp->Free();
		}
  }
	return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendCMDToDepartment(String const cmdStr, String const DepartmentID)
{
	String cmdTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	TJSONObject *JSONMsg;
	cmdTrimmed = Trim(cmdStr);
	bool allSender = false;
	bool curSender = false;

	//no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "cmd"));
	JSONMsg->AddPair(new TJSONPair("cmd", cmdTrimmed));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "1"));
	JSONMsg->AddPair(new TJSONPair("to", DepartmentID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));

	m_Query->Close();
	m_Query->SQL->Text="select EmpPKID from tbEmployeeData where EmpState=1 and EmpDeptCodeFKID="+QuotedStr(DepartmentID);
	m_Query->Open();
	while(!m_Query->Eof)
  {
		String UserID = m_Query->FieldByName("EmpPKID")->AsString;
		RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
		if(RecUser)
		{
			if(AnsiCompareText(curUser->UserID, UserID) != 0)
			{
				curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, (TJSONObject*)(JSONMsg->Clone()), Resp));
				allSender = allSender || curSender;
				if(curSender&&Resp!=NULL)
					Resp->Free();
			}
		}
		m_Query->Next();
	}
	m_Query->Close();
  return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendCMDToGroup(String const cmdStr, String const GroupID)
{
	String cmdTrimmed;
	TLoginUserRecord *curUser = NULL;
	TLoginUserRecord *RecUser = NULL;
	TJSONValue *Resp;
	TJSONObject *JSONMsg;
	cmdTrimmed = Trim(cmdStr);
	bool allSender = false;
	bool curSender = false;

	//no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;

  //get the current user
	curUser = GetCurLoginUser();
	if(curUser==NULL) return false;

  //wrap the message in a JSON object
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "cmd"));
	JSONMsg->AddPair(new TJSONPair("cmd", cmdTrimmed));
	JSONMsg->AddPair(new TJSONPair("from", curUser->UserID));
	JSONMsg->AddPair(new TJSONPair("fromusrname", curUser->UserName));
	JSONMsg->AddPair(new TJSONPair("msgtype", "3"));
	JSONMsg->AddPair(new TJSONPair("to", GroupID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("accbookid", curUser->AccBookID));

	m_Query->Close();
	m_Query->SQL->Text="select EmpPKID from tbEmployeeData where EmpState=1 and EmpPKID in (select GroupMemberID from tbGroupMember where GroupMemberGroupID="+QuotedStr(GroupID)+")";
	m_Query->Open();
	while(!m_Query->Eof)
  {
		String UserID = m_Query->FieldByName("EmpPKID")->AsString;
		RecUser = DMServerContainer->GetLoginUser(UserID,curUser->AccBookID);
		if(RecUser)
	  {
			if(AnsiCompareText(curUser->UserID, UserID) != 0)
			{
				curSender = (DMServerContainer->FSDSServer->NotifyCallback(RecUser->CallBackClientID, SMsgCallback, (TJSONObject*)(JSONMsg->Clone()), Resp));
				allSender = allSender || curSender;
				if(curSender&&Resp!=NULL)
					Resp->Free();
			}
		}
		m_Query->Next();
	}
	m_Query->Close();
	return allSender;
}
//---------------------------------------------------------------------------
bool  TChatRoomServerMethods::SendMgrMessage(int itype, String const Msg)
{
	String cmdTrimmed=Trim(Msg);
	TJSONObject *JSONMsg;
	bool allSender = false;

  //no message to send, so just exit
	if(cmdTrimmed == EmptyStr) return false;


  //wrap the message in a JSON object

  b_Query->Close();
  b_Query->SQL->Text="select * from SyAccBook where SyAccBookStatue=1";
  b_Query->Open();
  b_Query->First();
  while(!b_Query->Eof) //每个账套发送一次
  {
	String AcckBookID=b_Query->FieldByName("SyAccBookCode")->AsString;
	JSONMsg = new  TJSONObject();
	JSONMsg->AddPair(new TJSONPair("notificationType", "mgr"));
	JSONMsg->AddPair(new TJSONPair("from", "Admin"));
	JSONMsg->AddPair(new TJSONPair("fromusrname", "Admin"));
	JSONMsg->AddPair(new TJSONPair("msgtype", itype));
	JSONMsg->AddPair(new TJSONPair("to", "0"));
	JSONMsg->AddPair(new TJSONPair("accbookid", AcckBookID));
	JSONMsg->AddPair(new TJSONPair("datetime", Now().FormatString("YYYY-mm-DD HH:mm:ss")));
	JSONMsg->AddPair(new TJSONPair("message", cmdTrimmed));
	allSender = DMServerContainer->FSDSServer->BroadcastMessage(SMessageChannel+AcckBookID,SMsgCallback, JSONMsg)||allSender;
	b_Query->Next();
  }
  b_Query->Close();
  return allSender;
}
