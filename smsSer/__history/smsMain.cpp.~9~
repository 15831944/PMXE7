//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "smsMain.h"
#include "DecEnc.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TfrmSmsMain *frmSmsMain;
//---------------------------------------------------------------------------
__fastcall TfrmSmsMain::TfrmSmsMain(TComponent* Owner)
	: TForm(Owner)
{
	 FAgentIP="127.0.0.1";
	 FAgentPort=211;
	 FProtocol="TCP/IP";

		   FSMSType=0;
           FBeginTime=7 ;//开始时间
           FEndTime=22; //结束时间
           FWaitLong=1;//消息处理间隔时间 秒为单位
		   FRepeatCount=3;//发送错误时，需要重复次数
}
//---------------------------------------------------------------------------
void __fastcall TfrmSmsMain::LoadSetting()
{
	CoInitialize(NULL);
	String settingfile=ExtractFilePath(Application->ExeName)+"\\ClientConfig.xml";
	if(!FileExists(settingfile))
		throw Exception("找不到系统配置文件"+settingfile);
	XMLDocument1->FileName=settingfile;
	XMLDocument1->Active=true;
	IXMLNodeList *NodeList=XMLDocument1->ChildNodes;
	int count=NodeList->Count;
	IXMLNode *selectNode=NULL;
	for(int i=0;i<count;i++)
	{
		IXMLNode *curNode=NodeList->Nodes[i];
		if(curNode->LocalName==WideString("DefaultSettings")&&(curNode->GetAttribute("Version")==String("2.0.0.2")))
		{
			selectNode=curNode;
			break;
		}
	}
	if(selectNode!=NULL)
	{
		IXMLNodeList *sNodeList=selectNode->ChildNodes;
		for(int j=0;j<sNodeList->Count;j++)
		{
			IXMLNode *sNode=sNodeList->Nodes[j];
			if(sNode->GetAttribute("Name")==String("AgentAddress"))
				FAgentIP=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("AgentPort"))
				FAgentPort=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("Protocol"))
				FProtocol=sNode->GetAttribute("value");
		}
	}
	XMLDocument1->Active=false;
	CoUninitialize();
}
void __fastcall TfrmSmsMain::LoadAgentSetting()
{
  String settingfile=ExtractFilePath(Forms::Application->ExeName)+"default.xml";
  try
  {
	 CoInitialize(NULL);
   if(!FileExists(settingfile))
	 throw Exception("找不到系统配置文件"+settingfile);
	_di_IXMLDocument xdoc=NewXMLDocument();
	xdoc->LoadFromFile(settingfile);
	xdoc->Active=true;
	IXMLNodeList *NodeList=xdoc->ChildNodes;
	IXMLNode *selectNode=NULL;
	for(int i=0;i<NodeList->Count;i++)
	{
	   IXMLNode *curNode=NodeList->Nodes[i];
	   if(curNode->LocalName==WideString("DefaultSettings")&&(curNode->GetAttribute("Version")==String("2.0.0.2")))
		 {
			selectNode=curNode;
			break;
		 }
	}
	if(selectNode!=NULL)
	{
		IXMLNodeList *sNodeList=selectNode->ChildNodes;
		for(int j=0;j<sNodeList->Count;j++)
		{
			IXMLNode *sNode=sNodeList->Nodes[j];
			if(sNode->GetAttribute("Name")==String("DbConStr"))
			   FDbConStr=DecryptAES(sNode->GetAttribute("value"));
			else if(sNode->GetAttribute("Name")==String("SMSType"))
			   FSMSType=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("BeginTime"))
			   FBeginTime=FormatDateTime("HH:mm:ss",StrToDateTime(sNode->GetAttribute("value")));
			else if(sNode->GetAttribute("Name")==String("EndTime"))
			   FEndTime=FormatDateTime("HH:mm:ss",StrToDateTime(sNode->GetAttribute("value")));
			else if(sNode->GetAttribute("Name")==String("WaitLong"))
			   FWaitLong=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("RepeatCount"))
			   FRepeatCount=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("MonType"))
			   FMonType=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("PortNum"))
			   FPortNum=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("GateCordId"))
			   FCordId=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("GateUserName"))
			   FUserName=sNode->GetAttribute("value");
			else if(sNode->GetAttribute("Name")==String("GatePassWord"))
			   FPassword=sNode->GetAttribute("value");
		}
	}
	xdoc->Active=false;
		CoUninitialize();
 }
 catch(Exception &e)
 {
   WritErrorLog("读取参数错误,"+e.Message);
 }
}

void  __fastcall TfrmSmsMain::WritErrorLog(String ErrorLong)
{
   String Errorfile=ExtractFilePath(Forms::Application->ExeName)+"smsLong.txt";
   AnsiString sErrorLong = DateTimeToStr(Now())+"  "+ErrorLong+"\r\n";
   int iFileHandle;
   try
   {
       if (FileExists(Errorfile))
           iFileHandle = FileOpen(Errorfile,fmOpenWrite);
       else
           iFileHandle = FileCreate(Errorfile);
	   FileSeek(iFileHandle,0,2);
	   FileWrite(iFileHandle,sErrorLong.c_str(),sErrorLong.Length());
   }
   __finally
   {
       FileClose(iFileHandle);
   }
}
void __fastcall TfrmSmsMain::ServiceStart()
{
	LoadSetting();
	LoadAgentSetting();
	if (FSMSType <= 0)
	 {
	  return;
	 }
	 int Flag = FSMSType - 1;
	 ShortInfo = new TShortInfo(Owner,Flag);
     ShortInfo->BeginTime=FBeginTime;
     ShortInfo->EndTime=FEndTime;
     ShortInfo->WaitLong=FWaitLong*1000;
	 ShortInfo->RepeatCount=FRepeatCount;
	 ShortInfo->DBConnectString=FDbConStr;
	 ShortInfo->OnWriteErrorLog  = WritErrorLog;
	 ShortInfo->ModeType = FMonType;
	 ShortInfo->ComPort = FPortNum;
	 ShortInfo->CordId = FCordId;
	 ShortInfo->UserName = FUserName;
     ShortInfo->PassWord = FPassword;
     ShortInfo->Initializtion();
	 ShortInfo->StarTimer();
	 WritErrorLog("短信服务器已运行");
}
//---------------------------------------------------------------------------

void __fastcall TfrmSmsMain::ServiceStop()
{
	 try
     {
      try
       {
		 if (FSMSType != 0)
			delete ShortInfo;
	   }
	   catch(Exception &e)
	   {
		WritErrorLog(e.Message);
	   }
	  }
	  __finally
      {
	   WritErrorLog("短信服务器已停止");
      }
}
//---------------------------------------------------------------------------
