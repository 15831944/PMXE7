//---------------------------------------------------------------------------

#include <fmx.h>
#pragma hdrstop

#include "BaseFilters.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TBaseFiltersForm *BaseFiltersForm;
//---------------------------------------------------------------------------
__fastcall TBaseFiltersForm::TBaseFiltersForm(TComponent* Owner,TOnFilteredDataSet AOnFilteredDataSet,TClientBroker * ABroker)
	: TForm(Owner)
{
	FOnFilteredDataSet=AOnFilteredDataSet;
	FBroker=ABroker;
	FQuery=new TZClientQuery(this,FBroker);
	InitControl();
	ItemVertScrollBox->OnCalcContentBounds = CalcContentBoundsProc;
	FKeyboardShow=false;
	WaitAniIndicator->Enabled=false;
   // WaitAniIndicator->Visible=false;
}
//---------------------------------------------------------------------------
__fastcall TBaseFiltersForm::~TBaseFiltersForm()
{
    delete FQuery;
}
//---------------------------------------------------------------------------
void __fastcall TBaseFiltersForm::btQueryClick(TObject *Sender)
{
  try{
	  String CurFilters=BuildFilters();
   //	  WaitAniIndicator->Visible=true;
	  WaitAniIndicator->Enabled=true;
	  if(FOnFilteredDataSet)
		FOnFilteredDataSet(CurFilters);
	   Close();
  }
  __finally
  {
	WaitAniIndicator->Enabled=false;
   //	WaitAniIndicator->Visible=false;
  }

}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::btCancelClick(TObject *Sender)
{
  Close();
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void __fastcall TBaseFiltersForm::CalcContentBoundsProc(TObject * Sender, System::Types::TRectF &ContentBounds)
{
	if (FNeedOffset && FKBBounds.Top > 0) {
		ContentBounds.Bottom = Max(ContentBounds.Bottom, 2 * ClientHeight - FKBBounds.Top);
	}
}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::FormFocusChanged(TObject *Sender)
{
	UpdateKBBounds();
}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::FormVirtualKeyboardHidden(TObject *Sender, bool KeyboardVisible,
          const TRect &Bounds)
{
	FKeyboardShow= KeyboardVisible;
	FKBBounds = TRectF(0,0,0,0);
	FNeedOffset = False;
	RestorePosition();
}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::FormVirtualKeyboardShown(TObject *Sender, bool KeyboardVisible,
          const TRect &Bounds)
{
	FKeyboardShow= KeyboardVisible;
	FKBBounds = TRectF(Bounds);
	FKBBounds = TRectF(ScreenToClient(FKBBounds.TopLeft()),ScreenToClient(FKBBounds.BottomRight()));
	UpdateKBBounds();
}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::UpdateKBBounds()
{
	FNeedOffset = false;
	if (FKeyboardShow&&(Focused != NULL)) {
		TControl * LFocused = static_cast<TControl*>(Focused->GetObject());
		TRectF LFocusRect = LFocused->AbsoluteRect;
		LFocusRect.Offset(ItemVertScrollBox->ViewportPosition.X, ItemVertScrollBox->ViewportPosition.Y);
		if (LFocusRect.IntersectsWith(FKBBounds) && LFocusRect.Bottom > FKBBounds.Top) {
			FNeedOffset =true;// ;
			EditLayout->Align = TAlignLayout::Horizontal;
			ItemVertScrollBox->RealignContent();
			Application->ProcessMessages();
			ItemVertScrollBox->ViewportPosition = PointF(ItemVertScrollBox->ViewportPosition.X,
				LFocusRect.Bottom - FKBBounds.Top);
		}
	}
	if (!FNeedOffset) {
		RestorePosition();
	}
}
//---------------------------------------------------------------------------

void __fastcall TBaseFiltersForm::RestorePosition()
{
	ItemVertScrollBox->ViewportPosition = PointF(ItemVertScrollBox->ViewportPosition.X, 0);
	EditLayout->Align = TAlignLayout::Client;
	ItemVertScrollBox->RealignContent();
}
//---------------------------------------------------------------------------

