//---------------------------------------------------------------------------

#ifndef DecodeProcH
#define DecodeProcH
#include "Classes.hpp"
#include "SysUtils.hpp"
#include <zxing/common/Counted.h>
#include <zxing/Binarizer.h>
#include <zxing/MultiFormatReader.h>
#include <zxing/Result.h>
#include <zxing/ReaderException.h>
#include <zxing/common/GlobalHistogramBinarizer.h>
#include <zxing/common/HybridBinarizer.h>
#include <exception>
#include <zxing/Exception.h>
#include <zxing/common/IllegalArgumentException.h>
#include <zxing/BinaryBitmap.h>
#include <zxing/DecodeHints.h>

#include <zxing/qrcode/QRCodeReader.h>
#include <zxing/multi/qrcode/QRCodeMultiReader.h>
#include <zxing/multi/ByQuadrantReader.h>
#include <zxing/multi/MultipleBarcodeReader.h>
#include <zxing/multi/GenericMultipleBarcodeReader.h>
using namespace std;
using namespace zxing;
using namespace zxing::multi;
using namespace zxing::qrcode;
//---------------------------------------------------------------------------
//typedef void __fastcall (__closure *TDecodeProcess)(TBitmap *Image);
typedef void __fastcall (__closure *TOnDecodeResults)(String result,String barformat);
class TDecodeQueueProc : public  TThread
{
  private:
	   //	TDecodeProcess FDecodeProcess;
		TOnDecodeResults FOnDecodeResults;
		bool Fhybrid;
		Ref<LuminanceSource> Source;
		Ref<LuminanceSource> ImageToLuminanceSource(TBitmap *Image);
		void __fastcall read_image(Ref<LuminanceSource> source, bool hybrid);
  public:
	virtual  TDecodeQueueProc(TOnDecodeResults &AOnDecodeResults,TBitmap *FImage,bool Ahybrid);
	void __fastcall Execute();
};
#endif
