//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include <iostream>
#include <fstream>
#include <string>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
vector<Ref<Result> > decode(Ref<BinaryBitmap> image, DecodeHints hints) {
  Ref<Reader> reader(new MultiFormatReader);
  return vector<Ref<Result> >(1, reader->decode(image, hints));
}

vector<Ref<Result> > decode_multi(Ref<BinaryBitmap> image, DecodeHints hints) {
  MultiFormatReader delegate;
  GenericMultipleBarcodeReader reader(delegate);
  return reader.decodeMultiple(image, hints);
}
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
Ref<LuminanceSource> TForm1::BarcodePicToLuminanceSource(string filename)
{
   Ref<LuminanceSource> source;
   try {
      source = ImageReaderSource::create(filename);
    } catch (const zxing::IllegalArgumentException &e) {
	  return NULL;
	}
  return source;
}
int TForm1::read_image(Ref<LuminanceSource> source, bool hybrid,bool search_multi) {
  vector<Ref<Result> > results;
  string cell_result;
  int res = -1;

  try {
    Ref<Binarizer> binarizer;
    if (hybrid) {
      binarizer = new HybridBinarizer(source);
    } else {
      binarizer = new GlobalHistogramBinarizer(source);
    }
	DecodeHints hints(DecodeHints::DEFAULT_HINT);
	hints.setTryHarder(true);
    Ref<BinaryBitmap> binary(new BinaryBitmap(binarizer));
	if (search_multi) {
	  results = decode_multi(binary, hints);
	} else {
	  results = decode(binary, hints);
	}
	res = 0;
  } catch (const ReaderException& e) {
    cell_result = "zxing::ReaderException: " + string(e.what());
    res = -2;
  } catch (const zxing::IllegalArgumentException& e) {
    cell_result = "zxing::IllegalArgumentException: " + string(e.what());
    res = -3;
  } catch (const zxing::Exception& e) {
    cell_result = "zxing::Exception: " + string(e.what());
    res = -4;
  } catch (const std::exception& e) {
	cell_result = "std::exception: " + string(e.what());
    res = -5;
  }
  if (results.size() == 1) {
	std::string result = results[0]->getText()->getText();
	std::string formate = BarcodeFormat::barcodeFormatNames[results[0]->getBarcodeFormat()];
	res = -6;
  }
  return res;
}
void __fastcall TForm1::spbOpenClick(TObject *Sender)
{
  if(OpenPictureDialog1->Execute(Handle))
  {
	  edFileName->Text=OpenPictureDialog1->FileName;
  }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::btDecodeClick(TObject *Sender)
{
  if(FileExists(edFileName->Text))
  {

  }
}
//---------------------------------------------------------------------------

