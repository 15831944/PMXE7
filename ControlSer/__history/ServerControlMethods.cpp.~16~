//----------------------------------------------------------------------------
#include <System.SysUtils.hpp>
#include <System.StrUtils.hpp>
#pragma hdrstop

#include "ServerControlMethods.h"
#include "ServerContainerModule.h"
#include "ServerCtl.h"
#include <registry.hpp>
//----------------------------------------------------------------------------
#pragma package(smart_init)
//----------------------------------------------------------------------------
TJSONArray* TServerControlMethods::GetServerList()
{
  TJSONArray *ServerList=ServerControlModule->GetServerList();
  TJSONArray *nServerList=(TJSONArray *)ServerList->Clone();
  return nServerList;
}
//----------------------------------------------------------------------------
TJSONObject * TServerControlMethods::GetServerInfo(String ServerName)
{
  TJSONObject *retNode=NULL;
  int ServiceStatus=-1;
  TJSONArray *ServerList=ServerControlModule->GetServerList();
  for(int i=0;i<ServerList->Count;i++)
  {
	TJSONObject *sNode=(TJSONObject *)(ServerList->Items[i]);
	String NtSer=sNode->GetValue("Name")->Value();
	if(NtSer.UpperCase()==ServerName.UpperCase())
	{
	   int retval=SCQueryServiceStatus(NULL,NtSer.c_str(),ServiceStatus);
	   if(retval!=0)
         ServiceStatus=-1;
	   retNode=(TJSONObject *)(sNode->Clone());
	   retNode->RemovePair("ServiceStatus");
	   retNode->AddPair("ServiceStatus",ServiceStatus);
	   break;
	}
  }
  return retNode;
}
//----------------------------------------------------------------------------
int  TServerControlMethods::GetServerStatus(String ServerName)
{
  int retval,ServiceStatus;
  retval=SCQueryServiceStatus(NULL,ServerName.c_str(),ServiceStatus);
  if(retval!=0)
	 ServiceStatus=-1;//
  return  ServiceStatus;
}
//----------------------------------------------------------------------------
bool TServerControlMethods::StartServer(String ServerName)
{
  int bok=SCStartService(NULL,ServerName.c_str());
  return bok==0;
}
//----------------------------------------------------------------------------
bool TServerControlMethods::StopServer(String ServerName)
{
  int bok=SCStopService(NULL,ServerName.c_str());
  return bok==0;
}
//----------------------------------------------------------------------------
bool TServerControlMethods::RegServer(String ServerName)
{
	 int retvalue=-1;
	  TJSONObject *sNode= GetServerInfo(ServerName);
	  if(sNode&&(sNode->GetValue("ServiceStatus")->Value()=="-1"))  //未安装
		{
			String DisplayName=sNode->GetValue("Display")->Value();
			String BinFileName= sNode->GetValue("FileName")->Value()+" -instance="+ServerName;
			retvalue=SCCreateService(NULL,ServerName.c_str(),DisplayName.c_str(),BinFileName.c_str());
			TRegistry *reg;
			reg = new TRegistry();
			reg->RootKey = HKEY_LOCAL_MACHINE;
			try
			{
				reg->OpenKey("SYSTEM",false);
				reg->OpenKey("CurrentControlSet",false);
				reg->OpenKey("Services",false);
				reg->OpenKey(ServerName,true);
				reg->WriteString("Description",DisplayName+"实例为"+ServerName);
				reg->CloseKey();
			}
			__finally
			{
				reg->Free();
			}
	  }
	 return retvalue==0;
}
bool TServerControlMethods::UnregServer(String ServerName)
{
	int retvalue=SCDeleteService(NULL,ServerName.c_str());
	return retvalue==0;
}
